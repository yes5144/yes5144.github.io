(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{418:function(s,n,t){"use strict";t.r(n);var r=t(42),a=Object(r.a)({},(function(){var s=this,n=s.$createElement,t=s._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"多进程-future"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多进程-future"}},[s._v("#")]),s._v(" 多进程 future")]),s._v(" "),t("blockquote",[t("p",[s._v("在 Python 3.2 以后，concurrent.futures是内置的模块，我们可以直接使用。 如果你需要在 Python 2.7 中使用 concurrent.futures , 那么请用 pip 进行安装，pip install futures")])]),s._v(" "),t("h3",{attrs:{id:"多进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多进程"}},[s._v("#")]),s._v(" 多进程")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("## https://www.cnblogs.com/huchong/p/7459324.html\nfrom concurrent.futures import ProcessPoolExecutor\nimport os,time,random\ndef task(n):\n    print('%s is running' %os.getpid())\n    time.sleep(2)\n    return n**2\n\n\nif __name__ == '__main__':\n    p=ProcessPoolExecutor()  #不填则默认为cpu的个数\n    l=[]\n    start=time.time()\n    for i in range(10):\n        obj=p.submit(task,i)   #submit()方法返回的是一个future实例，要得到结果需要用obj.result()\n        l.append(obj)\n\n    p.shutdown()  #类似用from multiprocessing import Pool实现进程池中的close及join一起的作用\n    print('='*30)\n    # print([obj for obj in l])\n    print([obj.result() for obj in l])\n    print(time.time()-start)\n\n    #上面方法也可写成下面的方法\n    # start = time.time()\n    # with ProcessPoolExecutor() as p:   #类似打开文件,可省去.shutdown()\n    #     future_tasks = [p.submit(task, i) for i in range(10)]\n    # print('=' * 30)\n    # print([obj.result() for obj in future_tasks])\n    # print(time.time() - start)\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br")])])])}),[],!1,null,null,null);n.default=a.exports}}]);